Created by PLY version 3.0 (http://www.dabeaz.com/ply)

Grammar

Rule 1     S' -> program
Rule 2     program -> block
Rule 3     block -> inst block
Rule 4     block -> empty
Rule 5     inst -> ID DP
Rule 6     inst -> NOP
Rule 7     inst -> MOV REG COMMA NUM NUMBER
Rule 8     inst -> PRM REG COMMA REG
Rule 9     inst -> UMB REG COMMA REG COMMA NUM NUMBER
Rule 10    inst -> ORR REG COMMA REG COMMA REG
Rule 11    inst -> AND REG COMMA REG COMMA REG
Rule 12    inst -> AND REG COMMA REG COMMA NUM NUMBER
Rule 13    inst -> LSL REG COMMA REG COMMA NUM NUMBER
Rule 14    inst -> ADD REG COMMA REG COMMA REG
Rule 15    inst -> EOR REG COMMA REG COMMA REG
Rule 16    inst -> ADD REG COMMA REG COMMA NUM NUMBER
Rule 17    inst -> SUB REG COMMA REG COMMA REG
Rule 18    inst -> SUB REG COMMA REG COMMA NUM NUMBER
Rule 19    inst -> MUL REG COMMA REG COMMA REG
Rule 20    inst -> MUL REG COMMA REG COMMA NUM NUMBER
Rule 21    inst -> CMP REG COMMA REG
Rule 22    inst -> CMP REG COMMA NUM NUMBER
Rule 23    inst -> LDR REG COMMA LPC REG RPC COMMA REG
Rule 24    inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG
Rule 25    inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER
Rule 26    inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC
Rule 27    inst -> LDR REG COMMA LPC REG RPC
Rule 28    inst -> STR REG COMMA LPC REG RPC COMMA REG
Rule 29    inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC
Rule 30    inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG
Rule 31    inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER
Rule 32    inst -> STR REG COMMA LPC REG RPC
Rule 33    inst -> B ID
Rule 34    inst -> BEQ ID
Rule 35    inst -> BNE ID
Rule 36    inst -> BGT ID
Rule 37    inst -> BLT ID
Rule 38    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 13 15
AND                  : 10 11
B                    : 32
BEQ                  : 33
BGT                  : 35
BLT                  : 36
BNE                  : 34
CMP                  : 20 21
COMMA                : 6 7 8 8 9 9 10 10 11 11 12 12 13 13 14 14 15 15 16 16 17 17 18 18 19 19 20 21 22 22 23 23 24 24 25 25 26 27 27 28 28 29 29 30 30 31
DP                   : 4
EOR                  : 14
ID                   : 4 32 33 34 35 36
LDR                  : 22 23 24 25 26
LPC                  : 22 23 24 25 26 27 28 29 30 31
LSL                  : 12
MINUS                : 23 29
MOV                  : 6
MUL                  : 18 19
NOP                  : 5
NUM                  : 6 8 11 12 15 17 19 21 24 25 28 30
NUMBER               : 6 8 11 12 15 17 19 21 24 25 28 30
ORR                  : 9
PRM                  : 7
REG                  : 6 7 7 8 8 9 9 9 10 10 10 11 11 12 12 13 13 13 14 14 14 15 15 16 16 16 17 17 18 18 18 19 19 20 20 21 22 22 22 23 23 23 24 24 25 25 26 26 27 27 27 28 28 29 29 29 30 30 31 31
RPC                  : 22 23 24 25 26 27 28 29 30 31
STR                  : 27 28 29 30 31
SUB                  : 16 17
UMB                  : 8
error                : 

Nonterminals, with rules where they appear

block                : 1 2
empty                : 3
inst                 : 2
program              : 0

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . block
    (2) block -> . inst block
    (3) block -> . empty
    (4) inst -> . ID DP
    (5) inst -> . NOP
    (6) inst -> . MOV REG COMMA NUM NUMBER
    (7) inst -> . PRM REG COMMA REG
    (8) inst -> . UMB REG COMMA REG COMMA NUM NUMBER
    (9) inst -> . ORR REG COMMA REG COMMA REG
    (10) inst -> . AND REG COMMA REG COMMA REG
    (11) inst -> . AND REG COMMA REG COMMA NUM NUMBER
    (12) inst -> . LSL REG COMMA REG COMMA NUM NUMBER
    (13) inst -> . ADD REG COMMA REG COMMA REG
    (14) inst -> . EOR REG COMMA REG COMMA REG
    (15) inst -> . ADD REG COMMA REG COMMA NUM NUMBER
    (16) inst -> . SUB REG COMMA REG COMMA REG
    (17) inst -> . SUB REG COMMA REG COMMA NUM NUMBER
    (18) inst -> . MUL REG COMMA REG COMMA REG
    (19) inst -> . MUL REG COMMA REG COMMA NUM NUMBER
    (20) inst -> . CMP REG COMMA REG
    (21) inst -> . CMP REG COMMA NUM NUMBER
    (22) inst -> . LDR REG COMMA LPC REG RPC COMMA REG
    (23) inst -> . LDR REG COMMA LPC REG RPC COMMA MINUS REG
    (24) inst -> . LDR REG COMMA LPC REG RPC COMMA NUM NUMBER
    (25) inst -> . LDR REG COMMA LPC REG COMMA NUM NUMBER RPC
    (26) inst -> . LDR REG COMMA LPC REG RPC
    (27) inst -> . STR REG COMMA LPC REG RPC COMMA REG
    (28) inst -> . STR REG COMMA LPC REG COMMA NUM NUMBER RPC
    (29) inst -> . STR REG COMMA LPC REG RPC COMMA MINUS REG
    (30) inst -> . STR REG COMMA LPC REG RPC COMMA NUM NUMBER
    (31) inst -> . STR REG COMMA LPC REG RPC
    (32) inst -> . B ID
    (33) inst -> . BEQ ID
    (34) inst -> . BNE ID
    (35) inst -> . BGT ID
    (36) inst -> . BLT ID
    (37) empty -> .

    ID              shift and go to state 5
    NOP             shift and go to state 6
    MOV             shift and go to state 7
    PRM             shift and go to state 8
    UMB             shift and go to state 9
    ORR             shift and go to state 10
    AND             shift and go to state 11
    LSL             shift and go to state 12
    ADD             shift and go to state 13
    EOR             shift and go to state 14
    SUB             shift and go to state 15
    MUL             shift and go to state 16
    CMP             shift and go to state 17
    LDR             shift and go to state 18
    STR             shift and go to state 19
    B               shift and go to state 20
    BEQ             shift and go to state 21
    BNE             shift and go to state 22
    BGT             shift and go to state 23
    BLT             shift and go to state 24
    $end            reduce using rule 37 (empty -> .)

    program                        shift and go to state 1
    block                          shift and go to state 2
    inst                           shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> block .

    $end            reduce using rule 1 (program -> block .)


state 3

    (2) block -> inst . block
    (2) block -> . inst block
    (3) block -> . empty
    (4) inst -> . ID DP
    (5) inst -> . NOP
    (6) inst -> . MOV REG COMMA NUM NUMBER
    (7) inst -> . PRM REG COMMA REG
    (8) inst -> . UMB REG COMMA REG COMMA NUM NUMBER
    (9) inst -> . ORR REG COMMA REG COMMA REG
    (10) inst -> . AND REG COMMA REG COMMA REG
    (11) inst -> . AND REG COMMA REG COMMA NUM NUMBER
    (12) inst -> . LSL REG COMMA REG COMMA NUM NUMBER
    (13) inst -> . ADD REG COMMA REG COMMA REG
    (14) inst -> . EOR REG COMMA REG COMMA REG
    (15) inst -> . ADD REG COMMA REG COMMA NUM NUMBER
    (16) inst -> . SUB REG COMMA REG COMMA REG
    (17) inst -> . SUB REG COMMA REG COMMA NUM NUMBER
    (18) inst -> . MUL REG COMMA REG COMMA REG
    (19) inst -> . MUL REG COMMA REG COMMA NUM NUMBER
    (20) inst -> . CMP REG COMMA REG
    (21) inst -> . CMP REG COMMA NUM NUMBER
    (22) inst -> . LDR REG COMMA LPC REG RPC COMMA REG
    (23) inst -> . LDR REG COMMA LPC REG RPC COMMA MINUS REG
    (24) inst -> . LDR REG COMMA LPC REG RPC COMMA NUM NUMBER
    (25) inst -> . LDR REG COMMA LPC REG COMMA NUM NUMBER RPC
    (26) inst -> . LDR REG COMMA LPC REG RPC
    (27) inst -> . STR REG COMMA LPC REG RPC COMMA REG
    (28) inst -> . STR REG COMMA LPC REG COMMA NUM NUMBER RPC
    (29) inst -> . STR REG COMMA LPC REG RPC COMMA MINUS REG
    (30) inst -> . STR REG COMMA LPC REG RPC COMMA NUM NUMBER
    (31) inst -> . STR REG COMMA LPC REG RPC
    (32) inst -> . B ID
    (33) inst -> . BEQ ID
    (34) inst -> . BNE ID
    (35) inst -> . BGT ID
    (36) inst -> . BLT ID
    (37) empty -> .

    ID              shift and go to state 5
    NOP             shift and go to state 6
    MOV             shift and go to state 7
    PRM             shift and go to state 8
    UMB             shift and go to state 9
    ORR             shift and go to state 10
    AND             shift and go to state 11
    LSL             shift and go to state 12
    ADD             shift and go to state 13
    EOR             shift and go to state 14
    SUB             shift and go to state 15
    MUL             shift and go to state 16
    CMP             shift and go to state 17
    LDR             shift and go to state 18
    STR             shift and go to state 19
    B               shift and go to state 20
    BEQ             shift and go to state 21
    BNE             shift and go to state 22
    BGT             shift and go to state 23
    BLT             shift and go to state 24
    $end            reduce using rule 37 (empty -> .)

    inst                           shift and go to state 3
    block                          shift and go to state 25
    empty                          shift and go to state 4

state 4

    (3) block -> empty .

    $end            reduce using rule 3 (block -> empty .)


state 5

    (4) inst -> ID . DP

    DP              shift and go to state 26


state 6

    (5) inst -> NOP .

    ID              reduce using rule 5 (inst -> NOP .)
    NOP             reduce using rule 5 (inst -> NOP .)
    MOV             reduce using rule 5 (inst -> NOP .)
    PRM             reduce using rule 5 (inst -> NOP .)
    UMB             reduce using rule 5 (inst -> NOP .)
    ORR             reduce using rule 5 (inst -> NOP .)
    AND             reduce using rule 5 (inst -> NOP .)
    LSL             reduce using rule 5 (inst -> NOP .)
    ADD             reduce using rule 5 (inst -> NOP .)
    EOR             reduce using rule 5 (inst -> NOP .)
    SUB             reduce using rule 5 (inst -> NOP .)
    MUL             reduce using rule 5 (inst -> NOP .)
    CMP             reduce using rule 5 (inst -> NOP .)
    LDR             reduce using rule 5 (inst -> NOP .)
    STR             reduce using rule 5 (inst -> NOP .)
    B               reduce using rule 5 (inst -> NOP .)
    BEQ             reduce using rule 5 (inst -> NOP .)
    BNE             reduce using rule 5 (inst -> NOP .)
    BGT             reduce using rule 5 (inst -> NOP .)
    BLT             reduce using rule 5 (inst -> NOP .)
    $end            reduce using rule 5 (inst -> NOP .)


state 7

    (6) inst -> MOV . REG COMMA NUM NUMBER

    REG             shift and go to state 27


state 8

    (7) inst -> PRM . REG COMMA REG

    REG             shift and go to state 28


state 9

    (8) inst -> UMB . REG COMMA REG COMMA NUM NUMBER

    REG             shift and go to state 29


state 10

    (9) inst -> ORR . REG COMMA REG COMMA REG

    REG             shift and go to state 30


state 11

    (10) inst -> AND . REG COMMA REG COMMA REG
    (11) inst -> AND . REG COMMA REG COMMA NUM NUMBER

    REG             shift and go to state 31


state 12

    (12) inst -> LSL . REG COMMA REG COMMA NUM NUMBER

    REG             shift and go to state 32


state 13

    (13) inst -> ADD . REG COMMA REG COMMA REG
    (15) inst -> ADD . REG COMMA REG COMMA NUM NUMBER

    REG             shift and go to state 33


state 14

    (14) inst -> EOR . REG COMMA REG COMMA REG

    REG             shift and go to state 34


state 15

    (16) inst -> SUB . REG COMMA REG COMMA REG
    (17) inst -> SUB . REG COMMA REG COMMA NUM NUMBER

    REG             shift and go to state 35


state 16

    (18) inst -> MUL . REG COMMA REG COMMA REG
    (19) inst -> MUL . REG COMMA REG COMMA NUM NUMBER

    REG             shift and go to state 36


state 17

    (20) inst -> CMP . REG COMMA REG
    (21) inst -> CMP . REG COMMA NUM NUMBER

    REG             shift and go to state 37


state 18

    (22) inst -> LDR . REG COMMA LPC REG RPC COMMA REG
    (23) inst -> LDR . REG COMMA LPC REG RPC COMMA MINUS REG
    (24) inst -> LDR . REG COMMA LPC REG RPC COMMA NUM NUMBER
    (25) inst -> LDR . REG COMMA LPC REG COMMA NUM NUMBER RPC
    (26) inst -> LDR . REG COMMA LPC REG RPC

    REG             shift and go to state 38


state 19

    (27) inst -> STR . REG COMMA LPC REG RPC COMMA REG
    (28) inst -> STR . REG COMMA LPC REG COMMA NUM NUMBER RPC
    (29) inst -> STR . REG COMMA LPC REG RPC COMMA MINUS REG
    (30) inst -> STR . REG COMMA LPC REG RPC COMMA NUM NUMBER
    (31) inst -> STR . REG COMMA LPC REG RPC

    REG             shift and go to state 39


state 20

    (32) inst -> B . ID

    ID              shift and go to state 40


state 21

    (33) inst -> BEQ . ID

    ID              shift and go to state 41


state 22

    (34) inst -> BNE . ID

    ID              shift and go to state 42


state 23

    (35) inst -> BGT . ID

    ID              shift and go to state 43


state 24

    (36) inst -> BLT . ID

    ID              shift and go to state 44


state 25

    (2) block -> inst block .

    $end            reduce using rule 2 (block -> inst block .)


state 26

    (4) inst -> ID DP .

    ID              reduce using rule 4 (inst -> ID DP .)
    NOP             reduce using rule 4 (inst -> ID DP .)
    MOV             reduce using rule 4 (inst -> ID DP .)
    PRM             reduce using rule 4 (inst -> ID DP .)
    UMB             reduce using rule 4 (inst -> ID DP .)
    ORR             reduce using rule 4 (inst -> ID DP .)
    AND             reduce using rule 4 (inst -> ID DP .)
    LSL             reduce using rule 4 (inst -> ID DP .)
    ADD             reduce using rule 4 (inst -> ID DP .)
    EOR             reduce using rule 4 (inst -> ID DP .)
    SUB             reduce using rule 4 (inst -> ID DP .)
    MUL             reduce using rule 4 (inst -> ID DP .)
    CMP             reduce using rule 4 (inst -> ID DP .)
    LDR             reduce using rule 4 (inst -> ID DP .)
    STR             reduce using rule 4 (inst -> ID DP .)
    B               reduce using rule 4 (inst -> ID DP .)
    BEQ             reduce using rule 4 (inst -> ID DP .)
    BNE             reduce using rule 4 (inst -> ID DP .)
    BGT             reduce using rule 4 (inst -> ID DP .)
    BLT             reduce using rule 4 (inst -> ID DP .)
    $end            reduce using rule 4 (inst -> ID DP .)


state 27

    (6) inst -> MOV REG . COMMA NUM NUMBER

    COMMA           shift and go to state 45


state 28

    (7) inst -> PRM REG . COMMA REG

    COMMA           shift and go to state 46


state 29

    (8) inst -> UMB REG . COMMA REG COMMA NUM NUMBER

    COMMA           shift and go to state 47


state 30

    (9) inst -> ORR REG . COMMA REG COMMA REG

    COMMA           shift and go to state 48


state 31

    (10) inst -> AND REG . COMMA REG COMMA REG
    (11) inst -> AND REG . COMMA REG COMMA NUM NUMBER

    COMMA           shift and go to state 49


state 32

    (12) inst -> LSL REG . COMMA REG COMMA NUM NUMBER

    COMMA           shift and go to state 50


state 33

    (13) inst -> ADD REG . COMMA REG COMMA REG
    (15) inst -> ADD REG . COMMA REG COMMA NUM NUMBER

    COMMA           shift and go to state 51


state 34

    (14) inst -> EOR REG . COMMA REG COMMA REG

    COMMA           shift and go to state 52


state 35

    (16) inst -> SUB REG . COMMA REG COMMA REG
    (17) inst -> SUB REG . COMMA REG COMMA NUM NUMBER

    COMMA           shift and go to state 53


state 36

    (18) inst -> MUL REG . COMMA REG COMMA REG
    (19) inst -> MUL REG . COMMA REG COMMA NUM NUMBER

    COMMA           shift and go to state 54


state 37

    (20) inst -> CMP REG . COMMA REG
    (21) inst -> CMP REG . COMMA NUM NUMBER

    COMMA           shift and go to state 55


state 38

    (22) inst -> LDR REG . COMMA LPC REG RPC COMMA REG
    (23) inst -> LDR REG . COMMA LPC REG RPC COMMA MINUS REG
    (24) inst -> LDR REG . COMMA LPC REG RPC COMMA NUM NUMBER
    (25) inst -> LDR REG . COMMA LPC REG COMMA NUM NUMBER RPC
    (26) inst -> LDR REG . COMMA LPC REG RPC

    COMMA           shift and go to state 56


state 39

    (27) inst -> STR REG . COMMA LPC REG RPC COMMA REG
    (28) inst -> STR REG . COMMA LPC REG COMMA NUM NUMBER RPC
    (29) inst -> STR REG . COMMA LPC REG RPC COMMA MINUS REG
    (30) inst -> STR REG . COMMA LPC REG RPC COMMA NUM NUMBER
    (31) inst -> STR REG . COMMA LPC REG RPC

    COMMA           shift and go to state 57


state 40

    (32) inst -> B ID .

    ID              reduce using rule 32 (inst -> B ID .)
    NOP             reduce using rule 32 (inst -> B ID .)
    MOV             reduce using rule 32 (inst -> B ID .)
    PRM             reduce using rule 32 (inst -> B ID .)
    UMB             reduce using rule 32 (inst -> B ID .)
    ORR             reduce using rule 32 (inst -> B ID .)
    AND             reduce using rule 32 (inst -> B ID .)
    LSL             reduce using rule 32 (inst -> B ID .)
    ADD             reduce using rule 32 (inst -> B ID .)
    EOR             reduce using rule 32 (inst -> B ID .)
    SUB             reduce using rule 32 (inst -> B ID .)
    MUL             reduce using rule 32 (inst -> B ID .)
    CMP             reduce using rule 32 (inst -> B ID .)
    LDR             reduce using rule 32 (inst -> B ID .)
    STR             reduce using rule 32 (inst -> B ID .)
    B               reduce using rule 32 (inst -> B ID .)
    BEQ             reduce using rule 32 (inst -> B ID .)
    BNE             reduce using rule 32 (inst -> B ID .)
    BGT             reduce using rule 32 (inst -> B ID .)
    BLT             reduce using rule 32 (inst -> B ID .)
    $end            reduce using rule 32 (inst -> B ID .)


state 41

    (33) inst -> BEQ ID .

    ID              reduce using rule 33 (inst -> BEQ ID .)
    NOP             reduce using rule 33 (inst -> BEQ ID .)
    MOV             reduce using rule 33 (inst -> BEQ ID .)
    PRM             reduce using rule 33 (inst -> BEQ ID .)
    UMB             reduce using rule 33 (inst -> BEQ ID .)
    ORR             reduce using rule 33 (inst -> BEQ ID .)
    AND             reduce using rule 33 (inst -> BEQ ID .)
    LSL             reduce using rule 33 (inst -> BEQ ID .)
    ADD             reduce using rule 33 (inst -> BEQ ID .)
    EOR             reduce using rule 33 (inst -> BEQ ID .)
    SUB             reduce using rule 33 (inst -> BEQ ID .)
    MUL             reduce using rule 33 (inst -> BEQ ID .)
    CMP             reduce using rule 33 (inst -> BEQ ID .)
    LDR             reduce using rule 33 (inst -> BEQ ID .)
    STR             reduce using rule 33 (inst -> BEQ ID .)
    B               reduce using rule 33 (inst -> BEQ ID .)
    BEQ             reduce using rule 33 (inst -> BEQ ID .)
    BNE             reduce using rule 33 (inst -> BEQ ID .)
    BGT             reduce using rule 33 (inst -> BEQ ID .)
    BLT             reduce using rule 33 (inst -> BEQ ID .)
    $end            reduce using rule 33 (inst -> BEQ ID .)


state 42

    (34) inst -> BNE ID .

    ID              reduce using rule 34 (inst -> BNE ID .)
    NOP             reduce using rule 34 (inst -> BNE ID .)
    MOV             reduce using rule 34 (inst -> BNE ID .)
    PRM             reduce using rule 34 (inst -> BNE ID .)
    UMB             reduce using rule 34 (inst -> BNE ID .)
    ORR             reduce using rule 34 (inst -> BNE ID .)
    AND             reduce using rule 34 (inst -> BNE ID .)
    LSL             reduce using rule 34 (inst -> BNE ID .)
    ADD             reduce using rule 34 (inst -> BNE ID .)
    EOR             reduce using rule 34 (inst -> BNE ID .)
    SUB             reduce using rule 34 (inst -> BNE ID .)
    MUL             reduce using rule 34 (inst -> BNE ID .)
    CMP             reduce using rule 34 (inst -> BNE ID .)
    LDR             reduce using rule 34 (inst -> BNE ID .)
    STR             reduce using rule 34 (inst -> BNE ID .)
    B               reduce using rule 34 (inst -> BNE ID .)
    BEQ             reduce using rule 34 (inst -> BNE ID .)
    BNE             reduce using rule 34 (inst -> BNE ID .)
    BGT             reduce using rule 34 (inst -> BNE ID .)
    BLT             reduce using rule 34 (inst -> BNE ID .)
    $end            reduce using rule 34 (inst -> BNE ID .)


state 43

    (35) inst -> BGT ID .

    ID              reduce using rule 35 (inst -> BGT ID .)
    NOP             reduce using rule 35 (inst -> BGT ID .)
    MOV             reduce using rule 35 (inst -> BGT ID .)
    PRM             reduce using rule 35 (inst -> BGT ID .)
    UMB             reduce using rule 35 (inst -> BGT ID .)
    ORR             reduce using rule 35 (inst -> BGT ID .)
    AND             reduce using rule 35 (inst -> BGT ID .)
    LSL             reduce using rule 35 (inst -> BGT ID .)
    ADD             reduce using rule 35 (inst -> BGT ID .)
    EOR             reduce using rule 35 (inst -> BGT ID .)
    SUB             reduce using rule 35 (inst -> BGT ID .)
    MUL             reduce using rule 35 (inst -> BGT ID .)
    CMP             reduce using rule 35 (inst -> BGT ID .)
    LDR             reduce using rule 35 (inst -> BGT ID .)
    STR             reduce using rule 35 (inst -> BGT ID .)
    B               reduce using rule 35 (inst -> BGT ID .)
    BEQ             reduce using rule 35 (inst -> BGT ID .)
    BNE             reduce using rule 35 (inst -> BGT ID .)
    BGT             reduce using rule 35 (inst -> BGT ID .)
    BLT             reduce using rule 35 (inst -> BGT ID .)
    $end            reduce using rule 35 (inst -> BGT ID .)


state 44

    (36) inst -> BLT ID .

    ID              reduce using rule 36 (inst -> BLT ID .)
    NOP             reduce using rule 36 (inst -> BLT ID .)
    MOV             reduce using rule 36 (inst -> BLT ID .)
    PRM             reduce using rule 36 (inst -> BLT ID .)
    UMB             reduce using rule 36 (inst -> BLT ID .)
    ORR             reduce using rule 36 (inst -> BLT ID .)
    AND             reduce using rule 36 (inst -> BLT ID .)
    LSL             reduce using rule 36 (inst -> BLT ID .)
    ADD             reduce using rule 36 (inst -> BLT ID .)
    EOR             reduce using rule 36 (inst -> BLT ID .)
    SUB             reduce using rule 36 (inst -> BLT ID .)
    MUL             reduce using rule 36 (inst -> BLT ID .)
    CMP             reduce using rule 36 (inst -> BLT ID .)
    LDR             reduce using rule 36 (inst -> BLT ID .)
    STR             reduce using rule 36 (inst -> BLT ID .)
    B               reduce using rule 36 (inst -> BLT ID .)
    BEQ             reduce using rule 36 (inst -> BLT ID .)
    BNE             reduce using rule 36 (inst -> BLT ID .)
    BGT             reduce using rule 36 (inst -> BLT ID .)
    BLT             reduce using rule 36 (inst -> BLT ID .)
    $end            reduce using rule 36 (inst -> BLT ID .)


state 45

    (6) inst -> MOV REG COMMA . NUM NUMBER

    NUM             shift and go to state 58


state 46

    (7) inst -> PRM REG COMMA . REG

    REG             shift and go to state 59


state 47

    (8) inst -> UMB REG COMMA . REG COMMA NUM NUMBER

    REG             shift and go to state 60


state 48

    (9) inst -> ORR REG COMMA . REG COMMA REG

    REG             shift and go to state 61


state 49

    (10) inst -> AND REG COMMA . REG COMMA REG
    (11) inst -> AND REG COMMA . REG COMMA NUM NUMBER

    REG             shift and go to state 62


state 50

    (12) inst -> LSL REG COMMA . REG COMMA NUM NUMBER

    REG             shift and go to state 63


state 51

    (13) inst -> ADD REG COMMA . REG COMMA REG
    (15) inst -> ADD REG COMMA . REG COMMA NUM NUMBER

    REG             shift and go to state 64


state 52

    (14) inst -> EOR REG COMMA . REG COMMA REG

    REG             shift and go to state 65


state 53

    (16) inst -> SUB REG COMMA . REG COMMA REG
    (17) inst -> SUB REG COMMA . REG COMMA NUM NUMBER

    REG             shift and go to state 66


state 54

    (18) inst -> MUL REG COMMA . REG COMMA REG
    (19) inst -> MUL REG COMMA . REG COMMA NUM NUMBER

    REG             shift and go to state 67


state 55

    (20) inst -> CMP REG COMMA . REG
    (21) inst -> CMP REG COMMA . NUM NUMBER

    REG             shift and go to state 68
    NUM             shift and go to state 69


state 56

    (22) inst -> LDR REG COMMA . LPC REG RPC COMMA REG
    (23) inst -> LDR REG COMMA . LPC REG RPC COMMA MINUS REG
    (24) inst -> LDR REG COMMA . LPC REG RPC COMMA NUM NUMBER
    (25) inst -> LDR REG COMMA . LPC REG COMMA NUM NUMBER RPC
    (26) inst -> LDR REG COMMA . LPC REG RPC

    LPC             shift and go to state 70


state 57

    (27) inst -> STR REG COMMA . LPC REG RPC COMMA REG
    (28) inst -> STR REG COMMA . LPC REG COMMA NUM NUMBER RPC
    (29) inst -> STR REG COMMA . LPC REG RPC COMMA MINUS REG
    (30) inst -> STR REG COMMA . LPC REG RPC COMMA NUM NUMBER
    (31) inst -> STR REG COMMA . LPC REG RPC

    LPC             shift and go to state 71


state 58

    (6) inst -> MOV REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 72


state 59

    (7) inst -> PRM REG COMMA REG .

    ID              reduce using rule 7 (inst -> PRM REG COMMA REG .)
    NOP             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    MOV             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    PRM             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    UMB             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    ORR             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    AND             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    LSL             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    ADD             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    EOR             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    SUB             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    MUL             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    CMP             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    LDR             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    STR             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    B               reduce using rule 7 (inst -> PRM REG COMMA REG .)
    BEQ             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    BNE             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    BGT             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    BLT             reduce using rule 7 (inst -> PRM REG COMMA REG .)
    $end            reduce using rule 7 (inst -> PRM REG COMMA REG .)


state 60

    (8) inst -> UMB REG COMMA REG . COMMA NUM NUMBER

    COMMA           shift and go to state 73


state 61

    (9) inst -> ORR REG COMMA REG . COMMA REG

    COMMA           shift and go to state 74


state 62

    (10) inst -> AND REG COMMA REG . COMMA REG
    (11) inst -> AND REG COMMA REG . COMMA NUM NUMBER

    COMMA           shift and go to state 75


state 63

    (12) inst -> LSL REG COMMA REG . COMMA NUM NUMBER

    COMMA           shift and go to state 76


state 64

    (13) inst -> ADD REG COMMA REG . COMMA REG
    (15) inst -> ADD REG COMMA REG . COMMA NUM NUMBER

    COMMA           shift and go to state 77


state 65

    (14) inst -> EOR REG COMMA REG . COMMA REG

    COMMA           shift and go to state 78


state 66

    (16) inst -> SUB REG COMMA REG . COMMA REG
    (17) inst -> SUB REG COMMA REG . COMMA NUM NUMBER

    COMMA           shift and go to state 79


state 67

    (18) inst -> MUL REG COMMA REG . COMMA REG
    (19) inst -> MUL REG COMMA REG . COMMA NUM NUMBER

    COMMA           shift and go to state 80


state 68

    (20) inst -> CMP REG COMMA REG .

    ID              reduce using rule 20 (inst -> CMP REG COMMA REG .)
    NOP             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    MOV             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    PRM             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    UMB             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    ORR             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    AND             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    LSL             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    ADD             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    EOR             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    SUB             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    MUL             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    CMP             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    LDR             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    STR             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    B               reduce using rule 20 (inst -> CMP REG COMMA REG .)
    BEQ             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    BNE             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    BGT             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    BLT             reduce using rule 20 (inst -> CMP REG COMMA REG .)
    $end            reduce using rule 20 (inst -> CMP REG COMMA REG .)


state 69

    (21) inst -> CMP REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 81


state 70

    (22) inst -> LDR REG COMMA LPC . REG RPC COMMA REG
    (23) inst -> LDR REG COMMA LPC . REG RPC COMMA MINUS REG
    (24) inst -> LDR REG COMMA LPC . REG RPC COMMA NUM NUMBER
    (25) inst -> LDR REG COMMA LPC . REG COMMA NUM NUMBER RPC
    (26) inst -> LDR REG COMMA LPC . REG RPC

    REG             shift and go to state 82


state 71

    (27) inst -> STR REG COMMA LPC . REG RPC COMMA REG
    (28) inst -> STR REG COMMA LPC . REG COMMA NUM NUMBER RPC
    (29) inst -> STR REG COMMA LPC . REG RPC COMMA MINUS REG
    (30) inst -> STR REG COMMA LPC . REG RPC COMMA NUM NUMBER
    (31) inst -> STR REG COMMA LPC . REG RPC

    REG             shift and go to state 83


state 72

    (6) inst -> MOV REG COMMA NUM NUMBER .

    ID              reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    NOP             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    MOV             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    PRM             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    UMB             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    ORR             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    AND             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    LSL             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    ADD             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    EOR             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    SUB             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    MUL             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    CMP             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    LDR             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    STR             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    B               reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    BNE             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    BGT             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    BLT             reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)
    $end            reduce using rule 6 (inst -> MOV REG COMMA NUM NUMBER .)


state 73

    (8) inst -> UMB REG COMMA REG COMMA . NUM NUMBER

    NUM             shift and go to state 84


state 74

    (9) inst -> ORR REG COMMA REG COMMA . REG

    REG             shift and go to state 85


state 75

    (10) inst -> AND REG COMMA REG COMMA . REG
    (11) inst -> AND REG COMMA REG COMMA . NUM NUMBER

    REG             shift and go to state 86
    NUM             shift and go to state 87


state 76

    (12) inst -> LSL REG COMMA REG COMMA . NUM NUMBER

    NUM             shift and go to state 88


state 77

    (13) inst -> ADD REG COMMA REG COMMA . REG
    (15) inst -> ADD REG COMMA REG COMMA . NUM NUMBER

    REG             shift and go to state 89
    NUM             shift and go to state 90


state 78

    (14) inst -> EOR REG COMMA REG COMMA . REG

    REG             shift and go to state 91


state 79

    (16) inst -> SUB REG COMMA REG COMMA . REG
    (17) inst -> SUB REG COMMA REG COMMA . NUM NUMBER

    REG             shift and go to state 92
    NUM             shift and go to state 93


state 80

    (18) inst -> MUL REG COMMA REG COMMA . REG
    (19) inst -> MUL REG COMMA REG COMMA . NUM NUMBER

    REG             shift and go to state 94
    NUM             shift and go to state 95


state 81

    (21) inst -> CMP REG COMMA NUM NUMBER .

    ID              reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    NOP             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    MOV             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    PRM             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    UMB             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    ORR             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    AND             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    LSL             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    ADD             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    EOR             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    SUB             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    MUL             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    CMP             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    LDR             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    STR             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    B               reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    BNE             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    BGT             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    BLT             reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)
    $end            reduce using rule 21 (inst -> CMP REG COMMA NUM NUMBER .)


state 82

    (22) inst -> LDR REG COMMA LPC REG . RPC COMMA REG
    (23) inst -> LDR REG COMMA LPC REG . RPC COMMA MINUS REG
    (24) inst -> LDR REG COMMA LPC REG . RPC COMMA NUM NUMBER
    (25) inst -> LDR REG COMMA LPC REG . COMMA NUM NUMBER RPC
    (26) inst -> LDR REG COMMA LPC REG . RPC

    RPC             shift and go to state 97
    COMMA           shift and go to state 96


state 83

    (27) inst -> STR REG COMMA LPC REG . RPC COMMA REG
    (28) inst -> STR REG COMMA LPC REG . COMMA NUM NUMBER RPC
    (29) inst -> STR REG COMMA LPC REG . RPC COMMA MINUS REG
    (30) inst -> STR REG COMMA LPC REG . RPC COMMA NUM NUMBER
    (31) inst -> STR REG COMMA LPC REG . RPC

    RPC             shift and go to state 99
    COMMA           shift and go to state 98


state 84

    (8) inst -> UMB REG COMMA REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 100


state 85

    (9) inst -> ORR REG COMMA REG COMMA REG .

    ID              reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    NOP             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    MOV             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    PRM             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    UMB             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    ORR             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    AND             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    LSL             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    ADD             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    EOR             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    SUB             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    MUL             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    CMP             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    LDR             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    STR             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    B               reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    BEQ             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    BNE             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    BGT             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    BLT             reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)
    $end            reduce using rule 9 (inst -> ORR REG COMMA REG COMMA REG .)


state 86

    (10) inst -> AND REG COMMA REG COMMA REG .

    ID              reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    NOP             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    MOV             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    PRM             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    UMB             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    ORR             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    AND             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    LSL             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    ADD             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    EOR             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    SUB             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    MUL             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    CMP             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    LDR             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    STR             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    B               reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    BEQ             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    BNE             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    BGT             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    BLT             reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)
    $end            reduce using rule 10 (inst -> AND REG COMMA REG COMMA REG .)


state 87

    (11) inst -> AND REG COMMA REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 101


state 88

    (12) inst -> LSL REG COMMA REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 102


state 89

    (13) inst -> ADD REG COMMA REG COMMA REG .

    ID              reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    NOP             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    MOV             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    PRM             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    UMB             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    ORR             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    AND             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    LSL             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    ADD             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    EOR             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    SUB             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    MUL             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    CMP             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    LDR             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    STR             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    B               reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    BEQ             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    BNE             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    BGT             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    BLT             reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)
    $end            reduce using rule 13 (inst -> ADD REG COMMA REG COMMA REG .)


state 90

    (15) inst -> ADD REG COMMA REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 103


state 91

    (14) inst -> EOR REG COMMA REG COMMA REG .

    ID              reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    NOP             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    MOV             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    PRM             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    UMB             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    ORR             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    AND             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    LSL             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    ADD             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    EOR             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    SUB             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    MUL             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    CMP             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    LDR             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    STR             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    B               reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    BEQ             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    BNE             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    BGT             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    BLT             reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)
    $end            reduce using rule 14 (inst -> EOR REG COMMA REG COMMA REG .)


state 92

    (16) inst -> SUB REG COMMA REG COMMA REG .

    ID              reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    NOP             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    MOV             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    PRM             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    UMB             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    ORR             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    AND             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    LSL             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    ADD             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    EOR             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    SUB             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    MUL             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    CMP             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    LDR             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    STR             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    B               reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    BEQ             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    BNE             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    BGT             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    BLT             reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)
    $end            reduce using rule 16 (inst -> SUB REG COMMA REG COMMA REG .)


state 93

    (17) inst -> SUB REG COMMA REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 104


state 94

    (18) inst -> MUL REG COMMA REG COMMA REG .

    ID              reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    NOP             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    MOV             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    PRM             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    UMB             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    ORR             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    AND             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    LSL             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    ADD             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    EOR             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    SUB             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    MUL             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    CMP             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    LDR             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    STR             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    B               reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    BEQ             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    BNE             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    BGT             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    BLT             reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)
    $end            reduce using rule 18 (inst -> MUL REG COMMA REG COMMA REG .)


state 95

    (19) inst -> MUL REG COMMA REG COMMA NUM . NUMBER

    NUMBER          shift and go to state 105


state 96

    (25) inst -> LDR REG COMMA LPC REG COMMA . NUM NUMBER RPC

    NUM             shift and go to state 106


state 97

    (22) inst -> LDR REG COMMA LPC REG RPC . COMMA REG
    (23) inst -> LDR REG COMMA LPC REG RPC . COMMA MINUS REG
    (24) inst -> LDR REG COMMA LPC REG RPC . COMMA NUM NUMBER
    (26) inst -> LDR REG COMMA LPC REG RPC .

    COMMA           shift and go to state 107
    ID              reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    NOP             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    MOV             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    PRM             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    UMB             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    ORR             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    AND             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    LSL             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    ADD             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    EOR             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    SUB             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    MUL             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    CMP             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    LDR             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    STR             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    B               reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    BEQ             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    BNE             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    BGT             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    BLT             reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)
    $end            reduce using rule 26 (inst -> LDR REG COMMA LPC REG RPC .)


state 98

    (28) inst -> STR REG COMMA LPC REG COMMA . NUM NUMBER RPC

    NUM             shift and go to state 108


state 99

    (27) inst -> STR REG COMMA LPC REG RPC . COMMA REG
    (29) inst -> STR REG COMMA LPC REG RPC . COMMA MINUS REG
    (30) inst -> STR REG COMMA LPC REG RPC . COMMA NUM NUMBER
    (31) inst -> STR REG COMMA LPC REG RPC .

    COMMA           shift and go to state 109
    ID              reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    NOP             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    MOV             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    PRM             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    UMB             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    ORR             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    AND             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    LSL             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    ADD             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    EOR             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    SUB             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    MUL             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    CMP             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    LDR             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    STR             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    B               reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    BEQ             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    BNE             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    BGT             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    BLT             reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)
    $end            reduce using rule 31 (inst -> STR REG COMMA LPC REG RPC .)


state 100

    (8) inst -> UMB REG COMMA REG COMMA NUM NUMBER .

    ID              reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    NOP             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    MOV             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    PRM             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    UMB             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    ORR             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    AND             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    LSL             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    ADD             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    EOR             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    SUB             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    MUL             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    CMP             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    LDR             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    STR             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    B               reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    BNE             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    BGT             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    BLT             reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)
    $end            reduce using rule 8 (inst -> UMB REG COMMA REG COMMA NUM NUMBER .)


state 101

    (11) inst -> AND REG COMMA REG COMMA NUM NUMBER .

    ID              reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    NOP             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    MOV             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    PRM             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    UMB             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    ORR             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    AND             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    LSL             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    ADD             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    EOR             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    SUB             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    MUL             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    CMP             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    LDR             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    STR             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    B               reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    BNE             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    BGT             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    BLT             reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)
    $end            reduce using rule 11 (inst -> AND REG COMMA REG COMMA NUM NUMBER .)


state 102

    (12) inst -> LSL REG COMMA REG COMMA NUM NUMBER .

    ID              reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    NOP             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    MOV             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    PRM             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    UMB             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    ORR             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    AND             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    LSL             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    ADD             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    EOR             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    SUB             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    MUL             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    CMP             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    LDR             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    STR             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    B               reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    BNE             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    BGT             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    BLT             reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)
    $end            reduce using rule 12 (inst -> LSL REG COMMA REG COMMA NUM NUMBER .)


state 103

    (15) inst -> ADD REG COMMA REG COMMA NUM NUMBER .

    ID              reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    NOP             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    MOV             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    PRM             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    UMB             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    ORR             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    AND             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    LSL             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    ADD             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    EOR             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    SUB             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    MUL             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    CMP             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    LDR             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    STR             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    B               reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    BNE             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    BGT             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    BLT             reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)
    $end            reduce using rule 15 (inst -> ADD REG COMMA REG COMMA NUM NUMBER .)


state 104

    (17) inst -> SUB REG COMMA REG COMMA NUM NUMBER .

    ID              reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    NOP             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    MOV             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    PRM             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    UMB             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    ORR             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    AND             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    LSL             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    ADD             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    EOR             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    SUB             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    MUL             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    CMP             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    LDR             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    STR             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    B               reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    BNE             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    BGT             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    BLT             reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)
    $end            reduce using rule 17 (inst -> SUB REG COMMA REG COMMA NUM NUMBER .)


state 105

    (19) inst -> MUL REG COMMA REG COMMA NUM NUMBER .

    ID              reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    NOP             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    MOV             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    PRM             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    UMB             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    ORR             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    AND             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    LSL             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    ADD             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    EOR             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    SUB             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    MUL             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    CMP             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    LDR             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    STR             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    B               reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    BEQ             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    BNE             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    BGT             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    BLT             reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)
    $end            reduce using rule 19 (inst -> MUL REG COMMA REG COMMA NUM NUMBER .)


state 106

    (25) inst -> LDR REG COMMA LPC REG COMMA NUM . NUMBER RPC

    NUMBER          shift and go to state 110


state 107

    (22) inst -> LDR REG COMMA LPC REG RPC COMMA . REG
    (23) inst -> LDR REG COMMA LPC REG RPC COMMA . MINUS REG
    (24) inst -> LDR REG COMMA LPC REG RPC COMMA . NUM NUMBER

    REG             shift and go to state 111
    MINUS           shift and go to state 112
    NUM             shift and go to state 113


state 108

    (28) inst -> STR REG COMMA LPC REG COMMA NUM . NUMBER RPC

    NUMBER          shift and go to state 114


state 109

    (27) inst -> STR REG COMMA LPC REG RPC COMMA . REG
    (29) inst -> STR REG COMMA LPC REG RPC COMMA . MINUS REG
    (30) inst -> STR REG COMMA LPC REG RPC COMMA . NUM NUMBER

    REG             shift and go to state 115
    MINUS           shift and go to state 116
    NUM             shift and go to state 117


state 110

    (25) inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER . RPC

    RPC             shift and go to state 118


state 111

    (22) inst -> LDR REG COMMA LPC REG RPC COMMA REG .

    ID              reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    NOP             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    MOV             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    PRM             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    UMB             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    ORR             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    AND             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    LSL             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    ADD             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    EOR             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    SUB             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    MUL             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    CMP             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    LDR             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    STR             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    B               reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    BEQ             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    BNE             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    BGT             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    BLT             reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)
    $end            reduce using rule 22 (inst -> LDR REG COMMA LPC REG RPC COMMA REG .)


state 112

    (23) inst -> LDR REG COMMA LPC REG RPC COMMA MINUS . REG

    REG             shift and go to state 119


state 113

    (24) inst -> LDR REG COMMA LPC REG RPC COMMA NUM . NUMBER

    NUMBER          shift and go to state 120


state 114

    (28) inst -> STR REG COMMA LPC REG COMMA NUM NUMBER . RPC

    RPC             shift and go to state 121


state 115

    (27) inst -> STR REG COMMA LPC REG RPC COMMA REG .

    ID              reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    NOP             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    MOV             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    PRM             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    UMB             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    ORR             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    AND             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    LSL             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    ADD             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    EOR             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    SUB             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    MUL             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    CMP             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    LDR             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    STR             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    B               reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    BEQ             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    BNE             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    BGT             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    BLT             reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)
    $end            reduce using rule 27 (inst -> STR REG COMMA LPC REG RPC COMMA REG .)


state 116

    (29) inst -> STR REG COMMA LPC REG RPC COMMA MINUS . REG

    REG             shift and go to state 122


state 117

    (30) inst -> STR REG COMMA LPC REG RPC COMMA NUM . NUMBER

    NUMBER          shift and go to state 123


state 118

    (25) inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .

    ID              reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    NOP             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    MOV             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    PRM             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    UMB             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    ORR             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    AND             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    LSL             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    ADD             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    EOR             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    SUB             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    MUL             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    CMP             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    LDR             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    STR             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    B               reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BEQ             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BNE             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BGT             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BLT             reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    $end            reduce using rule 25 (inst -> LDR REG COMMA LPC REG COMMA NUM NUMBER RPC .)


state 119

    (23) inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .

    ID              reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    NOP             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    MOV             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    PRM             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    UMB             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    ORR             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    AND             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    LSL             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    ADD             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    EOR             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    SUB             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    MUL             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    CMP             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    LDR             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    STR             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    B               reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BEQ             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BNE             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BGT             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BLT             reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)
    $end            reduce using rule 23 (inst -> LDR REG COMMA LPC REG RPC COMMA MINUS REG .)


state 120

    (24) inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .

    ID              reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    NOP             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    MOV             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    PRM             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    UMB             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    ORR             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    AND             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    LSL             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    ADD             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    EOR             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    SUB             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    MUL             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    CMP             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    LDR             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    STR             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    B               reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BEQ             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BNE             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BGT             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BLT             reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    $end            reduce using rule 24 (inst -> LDR REG COMMA LPC REG RPC COMMA NUM NUMBER .)


state 121

    (28) inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .

    ID              reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    NOP             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    MOV             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    PRM             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    UMB             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    ORR             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    AND             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    LSL             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    ADD             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    EOR             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    SUB             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    MUL             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    CMP             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    LDR             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    STR             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    B               reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BEQ             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BNE             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BGT             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    BLT             reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)
    $end            reduce using rule 28 (inst -> STR REG COMMA LPC REG COMMA NUM NUMBER RPC .)


state 122

    (29) inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .

    ID              reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    NOP             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    MOV             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    PRM             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    UMB             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    ORR             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    AND             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    LSL             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    ADD             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    EOR             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    SUB             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    MUL             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    CMP             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    LDR             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    STR             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    B               reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BEQ             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BNE             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BGT             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    BLT             reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)
    $end            reduce using rule 29 (inst -> STR REG COMMA LPC REG RPC COMMA MINUS REG .)


state 123

    (30) inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .

    ID              reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    NOP             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    MOV             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    PRM             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    UMB             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    ORR             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    AND             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    LSL             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    ADD             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    EOR             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    SUB             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    MUL             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    CMP             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    LDR             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    STR             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    B               reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BEQ             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BNE             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BGT             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    BLT             reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)
    $end            reduce using rule 30 (inst -> STR REG COMMA LPC REG RPC COMMA NUM NUMBER .)

